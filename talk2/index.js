// Generated by CoffeeScript 1.4.0
(function() {
  var Animation,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Animation = (function() {

    function Animation(elt, opts) {
      this.start = __bind(this.start, this);

      this.update = __bind(this.update, this);

      var frame, img, _i, _len, _ref;
      this.frames = [];
      _ref = opts.frames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        frame = _ref[_i];
        img = $("<img>").attr("src", frame);
        if (opts.width != null) {
          img.attr("width", opts.width);
        }
        if (opts.height != null) {
          img.attr("height", opts.height);
        }
        this.frames.push(img);
      }
      this.n = 0;
      elt.append(this.frames[0]);
    }

    Animation.prototype.update = function() {
      var m;
      m = (this.n + 1) % this.frames.length;
      this.frames[this.n].replaceWith(this.frames[m]);
      return this.n = m;
    };

    Animation.prototype.start = function(fps) {
      return setInterval(this.update, 1000.0 / fps);
    };

    return Animation;

  })();

  $.fn.extend({
    animate: function(opts) {
      if (opts == null) {
        opts = {};
      }
      if (!(opts.fps != null)) {
        opts.fps = 1;
      }
      if (!(opts.frames != null)) {
        console.log("Empty animation?");
        return;
      }
      return this.each(function() {
        var ani;
        ani = new Animation($(this), opts);
        return ani.start(opts.fps);
      });
    }
  });

  $.fn.extend({
    mathjax: function(opts) {
      if (opts == null) {
        opts = {};
      }
      if (!(opts.display != null)) {
        opts.display = true;
      }
      return this.each(function() {
        var element, t, tex;
        t = $(this);
        tex = t.html();
        if (opts.display) {
          tex = "$${" + tex + "}$$";
        } else {
          tex = "\\({" + tex + "}\\)";
        }
        element = t.html(tex);
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, element[0]]);
      });
    }
  });

  $(function() {
    var f, x, _i, _len, _ref;
    $("#cover-animation").animate({
      frames: ['svg/delta_E-11a1-step-1000.svg', 'svg/delta_E-32a1-1000000.svg']
    });
    $("section").addClass('slide');
    $("[rel=tooltip]").tooltip({
      delay: {
        show: 1000,
        hide: 100
      }
    });
    $(".eq").mathjax({
      display: true
    });
    _ref = ['raw', 'medium', 'well'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      $("#" + x + "-defn").hover((function() {
        $(this).data('conj').show();
        return $("#conj-inst").hide();
      }), (function() {
        $(this).data('conj').hide();
        return $("#conj-inst").show();
      })).data("conj", $("#" + x + "-conj"));
    }
    $(".draggable").draggable();
    f = function() {
      return $.deck('.slide');
    };
    MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
    return MathJax.Hub.Queue(f);
  });

}).call(this);
